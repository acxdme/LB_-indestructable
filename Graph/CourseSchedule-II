// similar to course-schedule-I just changing the return types.

class Solution {
public:
    vector<int> findTopoOrderUsingKahn(int nodes ,unordered_map<int,list<int>>& adjList){
        queue<int> q;
        vector<int> indegree(nodes,0);
        for(auto it : adjList){
            for(auto nbr : it.second){
                indegree[nbr]++;
            }
        }
        for(int i =0 ;i<nodes;i++){
            if(indegree[i] == 0){
                q.push(i);
            }
        }
        vector<int> topoOrder;
        while(!q.empty()){
            int frontNode = q.front();
            topoOrder.push_back(frontNode);
            q.pop();
            for(auto nbr : adjList[frontNode]){
                indegree[nbr]--;
                if(indegree[nbr] == 0){
                    q.push(nbr);
                }
            }
        }

        if(topoOrder.size() == nodes){
            return topoOrder;
        }
        else{
            return {};
        }

    }
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
                //create adjList from prerequisites.
        // apply kahns algorithm.
        // validate topo ordering.
        unordered_map<int,list<int>> adjList;
        for(auto it : prerequisites){
            int u = it[0];
            int v = it[1];
            adjList[v].push_back(u);
        }

        vector<int> result =  findTopoOrderUsingKahn(numCourses,adjList);


        return result;
    }
};
