/*
 Undirected, equally weighted graph
 approach used BFS
*/

#include <iostream>
#include<unordered_map>
#include<list>
#include<queue>
#include<algorithm>

using namespace std;

class Graph {
private:
    unordered_map<int, list<int>> adjList;
public:

    void addEdge(int u, int v, bool direction) {
        adjList[u].push_back(v);
        if (!direction) {
            adjList[v].push_back(u);
        }
    }

    void printAdjList() {
        for (auto node : adjList) {
            cout << node.first << "->";
            for (auto nbr : node.second) {
                cout << nbr << ",";
            }cout << endl;
        }
    }

    void findShortestPathBfs(int nodes , int src , int dest) {
        unordered_map<int, int> visited;
        unordered_map<int, int> parent;
        queue<int> q;

        visited[src] = 1;
        parent[src] = -1;
        q.push(src);

        while (!q.empty()) {
            int frontNode = q.front();
            q.pop();
            for (auto nbr : adjList[frontNode]) {
                if (!visited[nbr]) {
                    visited[nbr] = 1;
                    parent[nbr] = frontNode;
                    q.push(nbr);
                }
            }
        }

        vector<int> shortestPath;
        int node = dest;
        while (node != -1) {
            shortestPath.push_back(node);
            node = parent[node];
        }

        reverse(shortestPath.begin(), shortestPath.end());

        for (auto it : shortestPath) {
            cout << it << " ";
        }cout << endl;

    }
};
int main()
{
    int nodes = 7;

    Graph g;
    g.addEdge(0, 1, 0);
    g.addEdge(0, 6, 0);
    g.addEdge(0, 5, 0);
    g.addEdge(1, 2, 0);
    g.addEdge(2, 3, 0);
    g.addEdge(6, 3, 0);
    g.addEdge(5, 4, 0);
    g.addEdge(4, 3, 0);

    g.printAdjList();

   int src = 0;
    int dest = 3;
    g.findShortestPathBfs(nodes,src,dest);


    return 0;

}
