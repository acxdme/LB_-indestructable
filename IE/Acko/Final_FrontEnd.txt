// html

// css

// js
EventLoop
setTimeout,callback and promise execution priority

// general frontEnd
Q) Journey of a server side rendered webpage.

1. **Receiving the HTML Response**:
   - The browser receives the HTML response from the server.
   - It starts parsing the HTML to construct the Document Object Model (DOM) tree, which represents the structure of the web page.

2. **Constructing the DOM Tree**:
   - The browser parses the HTML sequentially from top to bottom.
   - It creates DOM nodes for each HTML element encountered.
   - The DOM tree is a hierarchical representation of the HTML structure, with each node representing an element, attribute, or piece of text.

3. **Loading External Resources**:
   - While parsing the HTML, the browser encounters references to external resources like CSS stylesheets, JavaScript files, images, fonts, etc.
   - It initiates separate HTTP requests to fetch these external resources in parallel.

4. **Constructing the CSSOM Tree**:
   - As the browser downloads CSS files, it constructs the CSS Object Model (CSSOM) tree.
   - The CSSOM represents the styles applied to each element on the web page.

5. **Render Tree Construction**:
   - Once the DOM tree and CSSOM tree are constructed, the browser combines them to create the render tree.
   - The render tree contains only the nodes that are necessary to render the web page visually.

6. **Layout (Reflow)**:
   - The browser calculates the layout of each element on the page, determining its size, position, and how it interacts with other elements.
   - This process is also known as reflow or layout.

7. **Painting**:
   - Finally, the browser paints the pixels on the screen according to the render tree and layout information.
   - It may need to paint multiple layers, considering z-index and transparency effects.

8. **JavaScript Execution**:
   - If there are any JavaScript files referenced in the HTML, the browser downloads and executes them.
   - JavaScript can manipulate the DOM, modify styles, handle events, make AJAX requests, and perform other dynamic actions.

9. **Event Handling**:
   - The browser sets up event listeners and begins handling user interactions such as clicks, keyboard input, mouse movements, etc.

10. **Continuous Rendering and Interaction**:
    - The browser continues to render and update the page as needed, responding to user interactions, dynamic changes to the DOM, and updates from JavaScript code.

This entire process ensures that the web page is displayed correctly and responds interactively to user actions. It's crucial for front-end developers to understand this journey to optimize performance and user experience.
