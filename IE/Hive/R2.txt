// What happens on the onClick event
// shrey choudary

//challenges (plotly.js , authentication)
// class in js , OOPS
//
const  createSadDivAfter5Seconds = ()=> {
    setTimeout(()=>{

        Const sadDiv = document.createElement(“div”);

        Const myHappyDiv = document.getElementById(“MyHappyDiv”); // this will search in document by a query by id. return type will be: HTMLDivElement node.

        // apply some styling to the sadDiv. Width and height colors etc and a sad emoji.
         sadDiv.style.color="red"; // node it is not yet attached to DOM, have access to style property, color value is . can assign any other property like width and height. Upto this point i have not attached so it'll ntot be visile. only be in memory. 

        myHappyDiv.appendChild(sadDiv); // a child will be appended.

    },5000)
}


<div  id=”MyHappyDiv” onclick=”createSadDivAfter5Seconds()”> // clicked on this


js runtime, eventloop, 

settimeout, callback queue.

event propogation happens: default is bubbling, by default inner to outer.
memory creation, memory execution.
variables and fns var is hoisted above, fn declrataion is hoisted above. memory is assinged. temporal dead zone, anything with const and let, if you try to access it'll give a reference error. 
setimout is a webapi, which has a callback, and it has a delay in ms. 
It'll come to the stack, will delegate to webbrowser api.
directly reference the dom. vanilajs, nothing of react. 

DOM is a web API, provided by browser. task is delegated to browser api. in browser v8 engine has access to DOM. after appneding,do the process. if the layout has changed, (height and width) it'll cause a layout change of the entire page. heavy recomputation for the browser, CSSOM will also change, and style changes in repaint process.
pixel by pixel. 


Q1)
OOJS?

class Person // 2016. "class" didn't exist
{

  constructor(name){
      this.name = name
  }
}


const person = new Person("Ayush"); // this has been a valid statement since the beginning of JS

function Person (name){
    this.name = name; // what happens here if i don't call it with "new". what's the value of "this"..? Global context. Window object
}

function Employee(name,id){
   Person.call(this,name); //super
   
   this.id = id;
  
}

const p1 = new Person("Ac");
Person("shrey"); // 

class Employee extends Person { 
  constructor(name,id) {
    super(name);
    this.id = id;
  }
  
}

Q2)
CSS

z-index?


<div z={1} name={"A"}>
  
        <div z={2} name={"B"}> 
    
                <div z={1} name={"C"}>
                </div>
        
                <div z={5} name={"D"}> 
                </div>
    
        </div>

        <div z={3} name={"E"}> // higher
    
                <div z={2} name={"F"}> 
                </div>
        
                <div z={5} name={"G"}> // 1 -> 3 
                </div>
    
        </div>
  
</div>

G>F>E>D>C>B>A

all the divs are position: fixed, left: 0, top:0, width: 100, height: 100.
Q3)
const LeftArrowButton = ({playerControls}) => {

const moveLeft = ()=> {
   playerControls.position.x - - ; // let’s assume this works. This will move player by 1px.
}

const returnedItems = useLongPress({callback:  moveLeft, speed: SpeedOfInvocationOfTheCallback}); 100ms

return <div onClick={moveLeft}>Left Arrow </div>
}


const useLongPress= ({callback,speed})=> {

const [isPressing, setIsPressing] = useState(false); // depicts pressing

// handleMousedown
const handleMouseDown = () => {setIsPressing(true)}
const handleMouseUp = () =>{setIsPressing(false}

useEffect(()=>{
let t;
if(isPressing){
    t = setInterval(callback,speed);
}else{
  clearInterval(t);
}

//cleanup function
 return () => clearInterval(t);

},[isPressing,speed,callback]);


return {
onMouseUp : handleMouseUp
onMouseDown : handleMouseDown
}

}






